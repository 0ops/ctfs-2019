encflag = 50611934699436807341324621673555649459637628684006628234370925826190750999990
data = [(0, 57430146755200398706129636348071839276319802135726125194462810945281337779231L), (1, 11739003196122569136082022734967542796057090551035786119894209803597566446970L), (2, 49882570174557287921845008169283854297072634910698433304812534636992725680810L), (3, 76564166311237461898107580047668085204829147915045767619349246591339785876667L), (4, 56926861838926178470274192526150015940276596917152958363059097988270683253169L), (5, 43132079355175143669448365509639363142787061048852229095829488420696312623418L), (6, 39315289132161124853826471087991226121658917971707142768824445548233360513830L), (7, 18947238205741143508932663654060229761166444928891711556865220651149485526086L), (8, 54256605821447302397478777264455305616128807825109130936373385063510574047984L), (9, 57430146755200398706129636348071839276319802135726125194462810945281337779231L)]

from Crypto.Util.number import long_to_bytes

def findp(mk):
    a,b,c,d = var('a b c d')
    eqs = [(a*m+b-c*m*k-d*k) for m,k in mk]
    eqs = [f-g for f,g in zip(eqs[:-1], eqs[1:])]
    eqs = [f*g.coefficient(a)-g*f.coefficient(a) for f,g in zip(eqs[:-1], eqs[1:])]
    eqs = [f*g.coefficient(d)-g*f.coefficient(d) for f,g in zip(eqs[:-1], eqs[1:])]
    gcds = [abs(gcd(f.coefficient(c),g.coefficient(c))) for f,g in zip(eqs[:-1], eqs[1:])]
    maxk = max(k for m,k in mk)
    p = min(filter(lambda x:x>maxk, gcds))
    return p
    
p = findp(data)
a,b,c,d = matrix(Zmod(p),[[data[i][0],1,-data[i][0]*data[i][1],-data[i][1]] for i in range(4)]).right_kernel()[1]
flag = (b-(encflag)*d)*inverse_mod(int(encflag*c-a),p)%p
print long_to_bytes(flag)
