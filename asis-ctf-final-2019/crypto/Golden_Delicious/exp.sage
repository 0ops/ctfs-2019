# ref: http://mslc.ctf.su/wp/polictf-2012-crypto-500/

from Crypto.Util.number import long_to_bytes
(A_1, B_1) = (4100133310575364011719743521079184461074386086908714625945625015559982177755652249240883318459158099254673716037393799806563567496713759930310260790170700, 1122736575135956550498512579475613266532272320672056044481173789518413402619422268998022672611181357437113262000853974968410911833838413926464792002813447)
(A_2, B_2) = (7195356291935324092974083800656294719909791991638016800688869531480914420851344517648017858841138300709252000726562477192528094479414307745557474907942803, 6294820679829743993553990213393473947712658480308258869413745721454083757402985469790896377224901851178278372055326475131634987824882821588180629785125494)
P_1 = (2020, 1541289077285950476559411104738671299410620709860226880193167593009859736744811748999762048127883283085467497522757803253784396241175263384974343969389613)
P_2 = (2019, 4974488224848659884031032545639754297422048908695379071395934742158247177808858717918207312066922185990894913147917789468490894652686551750625949315572060)
Q_1 = (618557765800750819209991316860882839555616891049138511957097251334207165235365069009990394212384430641656483864543452461074647961570036980133121226790676, 1912192017248939370370171524353367472317941092660336078617752789285987994955919216772863103147273102025883679405387407568801952770276812434793253510856342)
Q_2 = (3498315230862051726722937542044146709141760804952759034107762377825674224891256652411838536715783050883855279807866167028753678099833796125634334124551556, 1700134660303914635540188684404266565369868807277098991690614159152164658899818711426168666271084645702085789685102435043642173628403538966759243249623606)

f = x**3 + A_1 * x + B_1
n1 = abs(gcd(Integer(P_1[1]**2 - f(P_1[0])), Integer(Q_1[1]**2 - f(Q_1[0]))))
f = x**3 + A_2 * x + B_2
n2 = abs(gcd(Integer(P_2[1]**2 - f(P_2[0])), Integer(Q_2[1]**2 - f(Q_2[0]))))

assert n1 % 2 == 1
assert n2 % 2 == 0
n2 //= 2
assert n2 % 2 == 1

p = gcd(n1, n2)
q1 = n1 // p
q2 = n2 // p
# p = 64625475219203122627428885867900327709109086174236405728143092124575350181719
# q1 = 77380797515115581917451014632536315865790113670310682445960443129081336285941
# q2 = 111569320517140496969247041436276443445812171498003419772096906307025767919169


E1p = EllipticCurve(GF(p), [A_1, B_1])
E1q = EllipticCurve(GF(q1), [A_1, B_1])
E2p = EllipticCurve(GF(p), [A_2, B_2])
E2q = EllipticCurve(GF(q2), [A_2, B_2])


def hensel_lift(curve, p, point):
    A, B = map(long, (E.a4(), E.a6()))
    x, y = map(long, point.xy())

    fr = y**2 - (x**3 + A * x + B)
    t = (- fr / p) % p
    t *= inverse_mod(2 * y, p)  # (y**2)' = 2 * y
    t %= p
    new_y = y + p * t
    return x, new_y


def solve(E, p, g, v):
    g = E(g)
    v = E(v)

    # lift points
    x1, y1 = g.xy()
    x2, y2 = v.xy()
    if 0:
        # Hensel lift can preserve the curve
        x1, y1 = hensel_lift(E, p, g)
        x2, y2 = hensel_lift(E, p, v)
    else:
        # we can calso lift by adding random multiple of p
        # just need to compute new curve
        x1 = int(x1)
        x2 = int(x2)
        y1 = int(y1) + p
        y2 = int(y2) + p

    # calculate new A, B (actually, they will be the same here)
    mod = p ** 2

    A2 = y2**2 - y1**2 - (x2**3 - x1**3)
    A2 = A2 * inverse_mod(x2 - x1, mod)
    A2 %= mod

    B2 = y1**2 - x1**3 - A2 * x1
    B2 %= mod

    # new curve
    E2 = EllipticCurve(IntegerModRing(p**2), [A2, B2])

    # calculate dlog
    g2s = (p - 1) * E2(x1, y1)
    v2s = (p - 1) * E2(x2, y2)

    x1s, y1s = map(long, g2s.xy())
    x2s, y2s = map(long, v2s.xy())

    assert (x1s - x1) % p == 0
    assert (x2s - x2) % p == 0
    dx1 = (x1s - x1) / p
    dx2 = (x2s - x2) / p
    dy1 = (y1s - y1)
    dy2 = (y2s - y2)

    m = dy1 * inverse_mod(int(dx1), p) * dx2 * inverse_mod(int(dy2), p)
    m %= p
    return m


f1p = solve(E1p, p, P_1, Q_1)
f1q = solve(E1q, q1, P_1, Q_1)
f2p = solve(E2p, p, P_2, Q_2)
f2q = solve(E2q, q2, P_2, Q_2)
f1 = crt([f1p, f1q], [p, q1])
f2 = crt([f2p, f2q], [p, q2])
flag = long_to_bytes(f1) + long_to_bytes(f2)
print flag
