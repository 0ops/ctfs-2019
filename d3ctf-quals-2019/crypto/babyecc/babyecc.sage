from sage.all import *
from secret import message
from Crypto.Util.number import *

N = 45260503363096543257148754436078556651964647703211673455989123897551066957489


# let S(a) = {pow(x, a, pow(2, 253)) | gcd(x, pow(2, 253)) == 1}
# mid_a is the minimum integer that satisfies S(mid_a) = {1}

useless_num1 = 84095692866856349150465790161000714096047844577928036285412413565748251721
A = useless_num1 + mid_a

B = # You can figure this out :P

F = IntegerModRing(N)
E = EllipticCurve(F, [A, B])

P = (44159955648066599253108832100718688457814511348998606527321393400875787217987,
     41184996991123419479625482964987363317909362431622777407043171585119451045333)
P = E(P)

m = bytes_to_long(message)
assert m < n
Q = m * P
print(Q)
# (29408960086221366360303377895207383466408262326913281665475073883068913811245 : 16767605826892592607157297849446627579968828319597447014637716335281880369304 : 1)
# flag = "d3ctf{" + message + "}"