N = 45260503363096543257148754436078556651964647703211673455989123897551066957489
P = (44159955648066599253108832100718688457814511348998606527321393400875787217987,
     41184996991123419479625482964987363317909362431622777407043171585119451045333)
Q = (29408960086221366360303377895207383466408262326913281665475073883068913811245, 16767605826892592607157297849446627579968828319597447014637716335281880369304)

x1, y1 = P
x2, y2 = Q
t1 = y1^2 - x1^3 % N
t2 = y2^2 - x2^3 % N
A = (t1-t2)*inverse_mod((x1-x2), N) % N
B = (y1^2 - x1^3 - A*x1) % N

F = IntegerModRing(N)
E = EllipticCurve(F, [A, B])
P = E(P)
Q = E(Q)

n1 = 330430173928965171697344693604119928553
n2 = 136974486394291891696342702324169727113
assert n1 * n2 == N
e1 = EllipticCurve(Zmod(n1), [A, B])
e2 = EllipticCurve(Zmod(n2), [A, B])
p1 = e1(P)
q1 = e1(Q)
p2 = e2(P)
q2 = e2(Q)

d1 = p1.discrete_log(q1)
d2 = p2.discrete_log(q2)
message = hex(crt([d1,d2], [p1.order(), p2.order()])).decode("hex")
print "d3ctf{" + message + "}"